const fs = require('fs');
const path = require('path');

// Helper function for colored console output
function colorLog(message, type = 'info') {
  const colors = {
    success: '\x1b[32m', // green
    info: '\x1b[36m',    // cyan
    warning: '\x1b[33m', // yellow
    error: '\x1b[31m',   // red
    reset: '\x1b[0m'     // reset
  };
  
  console.log(`${colors[type]}${message}${colors.reset}`);
}

// Source directory containing the War Thunder Maps
const SOURCE_DIR = 'C:\\Users\\Ciaran\\Pictures\\War Thunder Maps';

// Target directory in the project where we'll store the imported assets
const TARGET_DIR = path.join('assets', 'imported-maps');

// Function to ensure a directory exists
function ensureDirectoryExists(dirPath) {
  if (!fs.existsSync(dirPath)) {
    try {
      fs.mkdirSync(dirPath, { recursive: true });
      colorLog(`Created directory: ${dirPath}`, 'success');
    } catch (error) {
      colorLog(`Failed to create directory ${dirPath}: ${error.message}`, 'error');
      return false;
    }
  }
  return true;
}

// Function to copy a file
function copyFile(source, target) {
  try {
    fs.copyFileSync(source, target);
    colorLog(`Copied: ${path.basename(source)} -> ${target}`, 'success');
    return true;
  } catch (error) {
    colorLog(`Failed to copy ${source}: ${error.message}`, 'error');
    return false;
  }
}

// Function to process a map subfolder
function processMapFolder(folderName) {
  const sourceFolder = path.join(SOURCE_DIR, folderName);
  const targetFolder = path.join(TARGET_DIR, sanitizeFolderName(folderName));
  
  // Ensure the target folder exists
  if (!ensureDirectoryExists(targetFolder)) {
    return false;
  }
  
  // Read all files in the source folder
  try {
    const files = fs.readdirSync(sourceFolder);
    
    let mapFiles = files.filter(file => {
      const filePath = path.join(sourceFolder, file);
      return fs.statSync(filePath).isFile() && 
             !file.endsWith('.txt') && 
             file.startsWith('MapLayout_');
    });
    
    if (mapFiles.length === 0) {
      colorLog(`No map files found in ${folderName}`, 'warning');
      return false;
    }
    
    // Copy each map file
    mapFiles.forEach(file => {
      const sourceFile = path.join(sourceFolder, file);
      const targetFile = path.join(targetFolder, file);
      copyFile(sourceFile, targetFile);
    });
    
    colorLog(`Processed ${mapFiles.length} files from ${folderName}`, 'info');
    return true;
  } catch (error) {
    colorLog(`Error processing folder ${folderName}: ${error.message}`, 'error');
    return false;
  }
}

// Function to sanitize folder name (replace spaces with underscores, etc.)
function sanitizeFolderName(name) {
  return name.replace(/\s+/g, '_').toLowerCase();
}

// Main function
async function main() {
  colorLog('Starting Map Assets Import', 'info');
  
  // Check if source directory exists
  if (!fs.existsSync(SOURCE_DIR)) {
    colorLog(`Source directory not found: ${SOURCE_DIR}`, 'error');
    return;
  }
  
  // Ensure target directory exists
  if (!ensureDirectoryExists(TARGET_DIR)) {
    return;
  }
  
  // Get all subdirectories in the source directory
  try {
    const items = fs.readdirSync(SOURCE_DIR);
    
    const folders = items.filter(item => {
      const itemPath = path.join(SOURCE_DIR, item);
      return fs.statSync(itemPath).isDirectory();
    });
    
    if (folders.length === 0) {
      colorLog('No map folders found in the source directory', 'warning');
      return;
    }
    
    colorLog(`Found ${folders.length} map folders to process`, 'info');
    
    // Process each map folder
    let processedFolders = 0;
    
    folders.forEach(folder => {
      if (processMapFolder(folder)) {
        processedFolders++;
      }
    });
    
    colorLog(`Import complete. Processed ${processedFolders} out of ${folders.length} folders`, 'success');
    
    // Generate a mapping file for future reference
    generateMappingFile(folders);
    
  } catch (error) {
    colorLog(`Error reading source directory: ${error.message}`, 'error');
  }
}

// Generate a mapping file to help with future replacement
function generateMappingFile(folders) {
  const mappingFile = path.join(TARGET_DIR, 'map-assets-mapping.js');
  
  try {
    let mappingContent = `// Generated map assets mapping for future replacement
// This file maps the imported assets to their corresponding placeholders
// DO NOT edit this file manually - it is generated by the import script

const mapAssetsMapping = {
`;
    
    folders.forEach(folder => {
      const sanitizedName = sanitizeFolderName(folder);
      mappingContent += `  '${sanitizedName}': {\n`;
      mappingContent += `    folderName: '${folder}',\n`;
      mappingContent += `    placeholderName: null, // To be manually mapped\n`;
      mappingContent += `    assets: [],\n`;
      mappingContent += `  },\n`;
    });
    
    mappingContent += `};

module.exports = mapAssetsMapping;
`;
    
    fs.writeFileSync(mappingFile, mappingContent);
    colorLog(`Generated mapping file: ${mappingFile}`, 'success');
  } catch (error) {
    colorLog(`Failed to generate mapping file: ${error.message}`, 'error');
  }
}

// Execute the main function
main().catch(error => {
  colorLog(`Unhandled error: ${error.message}`, 'error');
  process.exit(1);
}); 