Project Overview
The goal is to create an automated system that processes NHS Dictionary of Medicines and Devices (dm+d) data to match Actual Medicinal Product Packs (AMPP) to Virtual Medicinal Product Packs (VMPP) and Global Trade Item Numbers (GTIN) to AMPP, and calculate missing drug tariff prices based on similar products. 
Good to know
The f_gtin2 file is nested within an additional ZIP file that will need to be processed. 
Access to the TRUD Requires an API Key. The same with Google Gemini, both should be kept secret. 
You need to download the ZIP file for dm+d to get access to the required “files to download”, this can be done by the following:
Go to: https://isd.digital.nhs.uk/trud/api/v1/keys/INSERT_API_KEY/items/24/releases?latest
Extract the archiveFileUrl from the releases[0] object in the JSON that’s returned. This will download the ZIP file for processing. 

Functional Requirements
1. Data Ingestion and Processing
1.1 Download Handling
•	Source: NHS England TRUD service (NHSBSA dm+d). 
•	Files to Download: 
o	f_vmp2.xml (Virtual Medicinal Product) 
o	f_vmpp2.xml (Virtual Medicinal Product Pack) 
o	f_amp2.xml (Actual Medicinal Product) 
o	f_ampp2.xml (Actual Medicinal Product Pack) 
o	f_gtin2.xml (GTIN mappings)
•	Automation: 
o	Obtain an API key from TRUD to access the files. 
o	Automate downloads weekly, every Monday at 02:00 UTC, using a cron job or scheduling mechanism. 
o	Store files in a data/ directory, overwriting previous versions with each update.
•	Error Handling: 
o	Retry failed downloads up to 3 times with a 5-minute delay between attempts. 
o	Log errors to a file (e.g., logs/download.log) for troubleshooting.
1.2 Data Parsing
•	Input: XML files from the data/ directory, validated against their provided XSDs. 
•	Output: SQLite database (dmd_data.db) with tables reflecting XSD structures: 
o	vmp: 
	VPID (integer, required): Unique identifier from VMP element. 
	NM (string, required): Name/description from VMP element (used as "VMP" field).
o	vmpp: 
	VPPID (integer, required): Unique identifier from VMPP element. 
	VPID (integer, required): Links to vmp.VPID. 
	NM (string, required): Name/description from VMPP element (used as "VMPP" field). 
	QTYVAL (float, required): Quantity value for pack size from VMPP. 
	QTY_UOMCD (integer, required): Unit of measure code for quantity from VMPP. 
	PRICE (integer, nullable): Drug tariff price from DTINFO element (in pence). 
	DT (date, nullable): Date of the drug tariff price from DTINFO.
o	amp: 
	APID (integer, required): Unique identifier from AMP element. 
	VPID (integer, required): Links to vmp.VPID. 
	DESC (string, required): Description from AMP element. 
	SUPPCD (integer, required): Supplier code.
o	ampp: 
	APPID (integer, required): Unique identifier from AMPP element (used as "AMPP" field). 
	VPPID (integer, required): Links to vmpp.VPPID. 
	APID (integer, required): Links to amp.APID. 
	NM (string, required): Name/description from AMPP element (used as "Description" field). 
	PRICE (integer, nullable): Drug tariff price from PRICE_INFO element (in pence). 
	PRICE_SOURCE (text, 'initial' or 'calculated'): Tracks price origin. 
	PRICE_METHOD (text, nullable, e.g., 'Same VMPP', 'Same VMP'): Specifies calculation method.
o	gtin: 
	AMPPID (integer, required): Links to ampp.APPID. 
	GTIN (string, required, 13 or 14 digits): Barcode from GTINDATA element. 
	STARTDT (date, required): Start date of GTIN validity. 
	ENDDT (date, nullable): End date of GTIN validity (null if active).
•	Process: 
o	Parse XML files in chunks of 1,000 records using XSDs to validate structure and extract fields. 
o	For f_vmpp2.xml, join VMPP and DTINFO on VPPID to include PRICE and DT where available; store the latest price based on DT (most recent date). 
o	For f_ampp2.xml, join AMPP and PRICE_INFO on APPID to include PRICE where available, setting PRICE_SOURCE to 'initial' and PRICE_METHOD to null; leave PRICE null if no PRICE_INFO exists. 
o	Load parsed data into SQLite tables, preserving XSD-defined relationships.
1.3 Relationships Between Files
•	Based on XSDs: 
o	vmp.VPID → vmpp.VPID: Links Virtual Medicinal Product to Virtual Medicinal Product Pack (one-to-many). 
o	vmp.VPID → amp.VPID: Links Virtual Medicinal Product to Actual Medicinal Product (one-to-many). 
o	vmpp.VPPID → ampp.VPPID: Links Virtual Medicinal Product Pack to Actual Medicinal Product Pack (one-to-many), enabling retrieval of all AMPPs for a VMPP. 
o	amp.APID → ampp.APID: Links Actual Medicinal Product to Actual Medicinal Product Pack (one-to-many). 
o	ampp.APPID → gtin.AMPPID: Links Actual Medicinal Product Pack to GTIN (one-to-many, as an AMPP can have multiple GTINs).
•	Implementation: 
o	Use SQL joins on these keys to build the search_data table, ensuring referential integrity. 
o	No LLM needed; relationships are explicit in the XSDs.
1.4 Pricing Rules to Fill Gaps
•	Objective: Calculate missing PRICE values in the ampp table, update PRICE_SOURCE, and set PRICE_METHOD, prioritizing AMPP initial prices over VMPP prices when both exist. 
•	Rules: 
1.	Initial Price Assignment: 
	If ampp.PRICE exists (from PRICE_INFO), use it, set PRICE_SOURCE to 'initial', and PRICE_METHOD to null. 
	If ampp.PRICE is null but vmpp.PRICE exists (from DTINFO for the matching VPPID), use vmpp.PRICE, set PRICE_SOURCE to 'initial', and PRICE_METHOD to null.
2.	Same VMPP (Primary Calculation): 
	For ampp records with null PRICE and no matching vmpp.PRICE: 
	Calculate the average PRICE of other ampp records with the same VPPID and non-null PRICE (from either PRICE_INFO or prior calculations). 
	Update PRICE with this average, set PRICE_SOURCE to 'calculated', and set PRICE_METHOD to 'Same VMPP'. 
	Apply only if at least one other AMPP with the same VPPID has a PRICE. 
	Use vmpp.QTYVAL and QTY_UOMCD to ensure pack sizes match, avoiding unit discrepancies.
3.	Same VMP (Fallback Calculation): 
	If no prices exist for the VMPP (neither vmpp.PRICE nor any ampp.PRICE for the VPPID): 
	Join ampp to vmpp to vmp using VPPID and VPID. 
	Calculate price per unit (PRICE ÷ vmpp.QTYVAL) from AMPPs with the same VPID and known prices (from PRICE_INFO or DTINFO), using QTY_UOMCD to verify unit consistency. 
	Estimate missing PRICE as per-unit price × target QTYVAL, set PRICE_SOURCE to 'calculated', and set PRICE_METHOD to 'Same VMP'.
	Example: "Paracetamol 500mg tablets 16 pack" has PRICE 80p (initial), QTYVAL 16 → 5p/tablet; "Paracetamol 500mg tablets 32 pack" with QTYVAL 32 → 5p × 32 = 160p (calculated, 'Same VMP').
4.	Default (Last Resort): 
	If no similar products (same VMPP or VMP) have prices, set PRICE to 0, PRICE_SOURCE to 'calculated', PRICE_METHOD to 'None', and log for manual review.
•	Storage: Update ampp table with calculated PRICE, PRICE_SOURCE, and PRICE_METHOD. 
•	LLM Role: No LLM needed; XSDs provide PRICE from DTINFO and PRICE_INFO, and QTYVAL/QTY_UOMCD for precise calculations.
1.5 Unified Search Table
•	Table: search_data with columns: 
o	VMPP (vmpp.NM, string): Virtual Medicinal Product Pack description. 
o	VMP (vmp.NM, string): Virtual Medicinal Product description. 
o	AMPP (ampp.APPID, integer): Actual Medicinal Product Pack identifier. 
o	Description (ampp.NM, string): AMPP description. 
o	Brand_or_Generic (text, derived): "Brand" or "Generic". 
o	Drug_Tariff_Price (ampp.PRICE, integer): Price in pence. 
o	Price_Source (ampp.PRICE_SOURCE, text): 'initial' or 'calculated'. 
o	Price_Method (ampp.PRICE_METHOD, text): e.g., 'Same VMPP', 'Same VMP', or 'None'.
•	Process: 
o	Join ampp, vmpp, and vmp on VPPID and VPID to create the dataset, ensuring all AMPPs for a VMPP are grouped by VPPID. 
o	Derive Brand_or_Generic: 
	Remove supplier name in brackets from ampp.NM (e.g., "(A A H Pharmaceuticals Ltd)") using regular expressions. 
	Compare the result to vmpp.NM: if identical, classify as "Generic"; otherwise, "Brand". 
	Example: 
	vmpp.NM: "Paracetamol 500mg soluble tablets 24 tablet" 
	ampp.NM: "Paracetamol 500mg soluble tablets (A A H Pharmaceuticals Ltd) 24 tablet" → "Paracetamol 500mg soluble tablets 24 tablet" → "Generic" 
	ampp.NM: "Panadol ActiFast Soluble tablets (Haleon UK Trading Ltd) 24 tablet" → "Panadol ActiFast Soluble tablets 24 tablet" → "Brand"
	LLM Role: Use LLM only for rare cases where NM contains ambiguous formatting (e.g., multiple brackets not following the supplier pattern), processing in batches of 50 records.
o	Create indexes on Description, AMPP, and VPPID for fast searches and VMPP-to-AMPP lookups.
2. LLM Usage
•	Minimized Reliance: 
o	Pricing uses PRICE from DTINFO (VMPP) and PRICE_INFO (AMPP), with QTYVAL/QTY_UOMCD for calculations, eliminating LLM pack size parsing. 
o	Relationships (VPID, VPPID, APID, APPID) are XSD-defined, removing LLM matching needs.
•	Specific LLM Role: 
o	Brand/Generic Edge Cases: Assist with parsing ampp.NM if supplier removal yields unclear results (e.g., non-standard naming or typos), expected to be <1% of records.

