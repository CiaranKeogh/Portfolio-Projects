{"ast":null,"code":"import api from './api';\n\n// Sample route data\nconst sampleRoutes = [{\n  _id: '1',\n  title: 'North Ridge Flanking Route',\n  description: 'A strategic flanking route that allows medium tanks to bypass the central combat area and attack enemy positions from behind.',\n  mapId: '1',\n  map: {\n    _id: '1',\n    name: 'Advance to the Rhine'\n  },\n  creator: {\n    _id: 'user1',\n    username: 'TankCommander'\n  },\n  gameMode: 'Ground Realistic',\n  vehicleType: 'Medium Tank',\n  difficulty: 'Medium',\n  effectiveness: 4.5,\n  coordinates: [{\n    x: 120,\n    y: 45\n  }, {\n    x: 135,\n    y: 60\n  }, {\n    x: 160,\n    y: 80\n  }, {\n    x: 200,\n    y: 85\n  }],\n  upvotes: 42,\n  downvotes: 5,\n  comments: [{\n    _id: 'c1',\n    user: {\n      _id: 'user2',\n      username: 'StratMaster'\n    },\n    content: 'Works great with German Panther tanks!',\n    createdAt: '2023-06-15T10:30:00Z'\n  }],\n  createdAt: '2023-06-10T08:15:00Z',\n  updatedAt: '2023-06-15T10:32:00Z'\n}, {\n  _id: '2',\n  title: 'South Forest Ambush Path',\n  description: 'A sneaky route through the forest that provides excellent cover and ambush opportunities for tank destroyers.',\n  mapId: '4',\n  map: {\n    _id: '4',\n    name: 'Finland'\n  },\n  creator: {\n    _id: 'user1',\n    username: 'TankCommander'\n  },\n  gameMode: 'Ground Realistic',\n  vehicleType: 'Tank Destroyer',\n  difficulty: 'Easy',\n  effectiveness: 4.8,\n  coordinates: [{\n    x: 75,\n    y: 200\n  }, {\n    x: 90,\n    y: 220\n  }, {\n    x: 110,\n    y: 225\n  }, {\n    x: 130,\n    y: 240\n  }],\n  upvotes: 28,\n  downvotes: 2,\n  comments: [],\n  createdAt: '2023-07-05T14:22:00Z',\n  updatedAt: '2023-07-05T14:22:00Z'\n}, {\n  _id: '3',\n  title: 'Central Push Strategy',\n  description: 'A direct route through the city center. Risky but can lead to quick capture of the central control point.',\n  mapId: '2',\n  map: {\n    _id: '2',\n    name: 'Berlin'\n  },\n  creator: {\n    _id: 'user3',\n    username: 'StrategyMaster'\n  },\n  gameMode: 'Ground Arcade',\n  vehicleType: 'Heavy Tank',\n  difficulty: 'Hard',\n  effectiveness: 3.9,\n  coordinates: [{\n    x: 150,\n    y: 150\n  }, {\n    x: 160,\n    y: 155\n  }, {\n    x: 175,\n    y: 160\n  }, {\n    x: 190,\n    y: 170\n  }],\n  upvotes: 67,\n  downvotes: 15,\n  comments: [{\n    _id: 'c2',\n    user: {\n      _id: 'user4',\n      username: 'TigerAce'\n    },\n    content: 'Works well with teammates, suicide mission solo.',\n    createdAt: '2023-05-20T16:45:00Z'\n  }, {\n    _id: 'c3',\n    user: {\n      _id: 'user5',\n      username: 'SovietTanker'\n    },\n    content: 'Great for IS-2 with its strong frontal armor.',\n    createdAt: '2023-05-21T08:12:00Z'\n  }],\n  createdAt: '2023-05-18T11:30:00Z',\n  updatedAt: '2023-05-21T08:14:00Z'\n}];\n\n/**\r\n * Get all routes\r\n * @returns {Promise} Promise object that resolves to an array of routes\r\n */\nexport const getRoutes = () => {\n  return new Promise(resolve => {\n    // Simulate API delay\n    setTimeout(() => {\n      resolve(sampleRoutes);\n    }, 800);\n  });\n};\n\n/**\r\n * Get a single route by ID\r\n * @param {string} id - ID of the route\r\n * @returns {Promise} Promise object that resolves to a route object\r\n */\nexport const getRouteById = id => {\n  return new Promise((resolve, reject) => {\n    // Simulate API delay\n    setTimeout(() => {\n      const route = sampleRoutes.find(r => r._id === id);\n      if (route) {\n        resolve(route);\n      } else {\n        reject(new Error('Route not found'));\n      }\n    }, 600);\n  });\n};\n\n/**\r\n * Get routes by map ID\r\n * @param {string} mapId - ID of the map\r\n * @returns {Promise} Promise object that resolves to an array of routes\r\n */\nexport const getRoutesByMap = mapId => {\n  return new Promise(resolve => {\n    // Simulate API delay\n    setTimeout(() => {\n      const filteredRoutes = sampleRoutes.filter(route => route.mapId === mapId);\n      resolve(filteredRoutes);\n    }, 800);\n  });\n};\n\n/**\r\n * Get routes by user ID\r\n * @param {string} userId - ID of the user\r\n * @returns {Promise} Promise object that resolves to an array of routes\r\n */\nexport const getRoutesByUser = userId => {\n  return new Promise(resolve => {\n    // Simulate API delay\n    setTimeout(() => {\n      const filteredRoutes = sampleRoutes.filter(route => route.creator._id === userId);\n      resolve(filteredRoutes);\n    }, 800);\n  });\n};\n\n/**\r\n * Get top rated routes\r\n * @returns {Promise} Promise object that resolves to an array of routes\r\n */\nexport const getTopRatedRoutes = () => {\n  return new Promise(resolve => {\n    // Simulate API delay\n    setTimeout(() => {\n      const sortedRoutes = [...sampleRoutes].sort((a, b) => {\n        const scoreA = a.upvotes - a.downvotes;\n        const scoreB = b.upvotes - b.downvotes;\n        return scoreB - scoreA;\n      });\n      resolve(sortedRoutes.slice(0, 5)); // Top 5 routes\n    }, 800);\n  });\n};\n\n/**\r\n * Get recent routes\r\n * @returns {Promise} Promise object that resolves to an array of routes\r\n */\nexport const getRecentRoutes = () => {\n  return new Promise(resolve => {\n    // Simulate API delay\n    setTimeout(() => {\n      const sortedRoutes = [...sampleRoutes].sort((a, b) => {\n        return new Date(b.createdAt) - new Date(a.createdAt);\n      });\n      resolve(sortedRoutes.slice(0, 5)); // Most recent 5 routes\n    }, 800);\n  });\n};\n\n/**\r\n * Search routes\r\n * @param {string} searchTerm - Term to search for\r\n * @returns {Promise} Promise object that resolves to an array of routes\r\n */\nexport const searchRoutes = searchTerm => {\n  return new Promise(resolve => {\n    // Simulate API delay\n    setTimeout(() => {\n      const filteredRoutes = sampleRoutes.filter(route => route.title.toLowerCase().includes(searchTerm.toLowerCase()) || route.description.toLowerCase().includes(searchTerm.toLowerCase()));\n      resolve(filteredRoutes);\n    }, 800);\n  });\n};\n\n/**\r\n * Create a new route\r\n * @param {Object} routeData - Data for the new route\r\n * @returns {Promise} Promise object that resolves to the created route\r\n */\nexport const createRoute = routeData => {\n  return new Promise(resolve => {\n    // Simulate API delay\n    setTimeout(() => {\n      // Generate a simple random ID\n      const newId = Math.floor(Math.random() * 10000).toString();\n\n      // Create the new route with timestamp\n      const newRoute = {\n        _id: newId,\n        ...routeData,\n        upvotes: 0,\n        downvotes: 0,\n        comments: [],\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      // In a real app, this would be saved to a database\n      // Here we just return it\n      resolve(newRoute);\n    }, 1200);\n  });\n};\n\n/**\r\n * Update an existing route\r\n * @param {string} id - ID of the route to update\r\n * @param {Object} routeData - New data for the route\r\n * @returns {Promise} Promise object that resolves to the updated route\r\n */\nexport const updateRoute = (id, routeData) => {\n  return new Promise((resolve, reject) => {\n    // Simulate API delay\n    setTimeout(() => {\n      const routeIndex = sampleRoutes.findIndex(r => r._id === id);\n      if (routeIndex !== -1) {\n        // In a real app, this would update the database\n        const updatedRoute = {\n          ...sampleRoutes[routeIndex],\n          ...routeData,\n          updatedAt: new Date().toISOString()\n        };\n        resolve(updatedRoute);\n      } else {\n        reject(new Error('Route not found'));\n      }\n    }, 1000);\n  });\n};\n\n/**\r\n * Delete a route\r\n * @param {string} id - ID of the route to delete\r\n * @returns {Promise} Promise object that resolves when the route is deleted\r\n */\nexport const deleteRoute = id => {\n  return new Promise((resolve, reject) => {\n    // Simulate API delay\n    setTimeout(() => {\n      const routeIndex = sampleRoutes.findIndex(r => r._id === id);\n      if (routeIndex !== -1) {\n        // In a real app, this would delete from the database\n        resolve({\n          success: true,\n          message: 'Route deleted successfully'\n        });\n      } else {\n        reject(new Error('Route not found'));\n      }\n    }, 800);\n  });\n};\n\n/**\r\n * Vote on a route\r\n * @param {string} id - ID of the route to vote on\r\n * @param {string} voteType - Type of vote ('up' or 'down')\r\n * @returns {Promise} Promise object that resolves to the updated route\r\n */\nexport const voteOnRoute = (id, voteType) => {\n  return new Promise((resolve, reject) => {\n    // Simulate API delay\n    setTimeout(() => {\n      const routeIndex = sampleRoutes.findIndex(r => r._id === id);\n      if (routeIndex !== -1) {\n        // In a real app, this would update the database\n        const updatedRoute = {\n          ...sampleRoutes[routeIndex]\n        };\n        if (voteType === 'up') {\n          updatedRoute.upvotes += 1;\n        } else if (voteType === 'down') {\n          updatedRoute.downvotes += 1;\n        }\n        resolve(updatedRoute);\n      } else {\n        reject(new Error('Route not found'));\n      }\n    }, 500);\n  });\n};\n\n/**\r\n * Add a comment to a route\r\n * @param {string} routeId - ID of the route\r\n * @param {Object} commentData - Data for the new comment\r\n * @returns {Promise} Promise object that resolves to the updated route\r\n */\nexport const addComment = (routeId, commentData) => {\n  return new Promise((resolve, reject) => {\n    // Simulate API delay\n    setTimeout(() => {\n      const routeIndex = sampleRoutes.findIndex(r => r._id === routeId);\n      if (routeIndex !== -1) {\n        // Generate a simple random ID\n        const newCommentId = `c${Math.floor(Math.random() * 10000)}`;\n\n        // Create the new comment\n        const newComment = {\n          _id: newCommentId,\n          ...commentData,\n          createdAt: new Date().toISOString()\n        };\n\n        // Add comment to route\n        const updatedRoute = {\n          ...sampleRoutes[routeIndex],\n          comments: [...sampleRoutes[routeIndex].comments, newComment],\n          updatedAt: new Date().toISOString()\n        };\n        resolve(updatedRoute);\n      } else {\n        reject(new Error('Route not found'));\n      }\n    }, 800);\n  });\n};","map":{"version":3,"names":["api","sampleRoutes","_id","title","description","mapId","map","name","creator","username","gameMode","vehicleType","difficulty","effectiveness","coordinates","x","y","upvotes","downvotes","comments","user","content","createdAt","updatedAt","getRoutes","Promise","resolve","setTimeout","getRouteById","id","reject","route","find","r","Error","getRoutesByMap","filteredRoutes","filter","getRoutesByUser","userId","getTopRatedRoutes","sortedRoutes","sort","a","b","scoreA","scoreB","slice","getRecentRoutes","Date","searchRoutes","searchTerm","toLowerCase","includes","createRoute","routeData","newId","Math","floor","random","toString","newRoute","toISOString","updateRoute","routeIndex","findIndex","updatedRoute","deleteRoute","success","message","voteOnRoute","voteType","addComment","routeId","commentData","newCommentId","newComment"],"sources":["C:/Users/Ciaran/Documents/War Thunder Tactics/frontend/src/services/routeService.js"],"sourcesContent":["import api from './api';\r\n\r\n// Sample route data\r\nconst sampleRoutes = [\r\n  {\r\n    _id: '1',\r\n    title: 'North Ridge Flanking Route',\r\n    description: 'A strategic flanking route that allows medium tanks to bypass the central combat area and attack enemy positions from behind.',\r\n    mapId: '1',\r\n    map: { \r\n      _id: '1', \r\n      name: 'Advance to the Rhine' \r\n    },\r\n    creator: {\r\n      _id: 'user1',\r\n      username: 'TankCommander'\r\n    },\r\n    gameMode: 'Ground Realistic',\r\n    vehicleType: 'Medium Tank',\r\n    difficulty: 'Medium',\r\n    effectiveness: 4.5,\r\n    coordinates: [\r\n      { x: 120, y: 45 },\r\n      { x: 135, y: 60 },\r\n      { x: 160, y: 80 },\r\n      { x: 200, y: 85 }\r\n    ],\r\n    upvotes: 42,\r\n    downvotes: 5,\r\n    comments: [\r\n      {\r\n        _id: 'c1',\r\n        user: { _id: 'user2', username: 'StratMaster' },\r\n        content: 'Works great with German Panther tanks!',\r\n        createdAt: '2023-06-15T10:30:00Z'\r\n      }\r\n    ],\r\n    createdAt: '2023-06-10T08:15:00Z',\r\n    updatedAt: '2023-06-15T10:32:00Z'\r\n  },\r\n  {\r\n    _id: '2',\r\n    title: 'South Forest Ambush Path',\r\n    description: 'A sneaky route through the forest that provides excellent cover and ambush opportunities for tank destroyers.',\r\n    mapId: '4',\r\n    map: { \r\n      _id: '4', \r\n      name: 'Finland' \r\n    },\r\n    creator: {\r\n      _id: 'user1',\r\n      username: 'TankCommander'\r\n    },\r\n    gameMode: 'Ground Realistic',\r\n    vehicleType: 'Tank Destroyer',\r\n    difficulty: 'Easy',\r\n    effectiveness: 4.8,\r\n    coordinates: [\r\n      { x: 75, y: 200 },\r\n      { x: 90, y: 220 },\r\n      { x: 110, y: 225 },\r\n      { x: 130, y: 240 }\r\n    ],\r\n    upvotes: 28,\r\n    downvotes: 2,\r\n    comments: [],\r\n    createdAt: '2023-07-05T14:22:00Z',\r\n    updatedAt: '2023-07-05T14:22:00Z'\r\n  },\r\n  {\r\n    _id: '3',\r\n    title: 'Central Push Strategy',\r\n    description: 'A direct route through the city center. Risky but can lead to quick capture of the central control point.',\r\n    mapId: '2',\r\n    map: { \r\n      _id: '2', \r\n      name: 'Berlin' \r\n    },\r\n    creator: {\r\n      _id: 'user3',\r\n      username: 'StrategyMaster'\r\n    },\r\n    gameMode: 'Ground Arcade',\r\n    vehicleType: 'Heavy Tank',\r\n    difficulty: 'Hard',\r\n    effectiveness: 3.9,\r\n    coordinates: [\r\n      { x: 150, y: 150 },\r\n      { x: 160, y: 155 },\r\n      { x: 175, y: 160 },\r\n      { x: 190, y: 170 }\r\n    ],\r\n    upvotes: 67,\r\n    downvotes: 15,\r\n    comments: [\r\n      {\r\n        _id: 'c2',\r\n        user: { _id: 'user4', username: 'TigerAce' },\r\n        content: 'Works well with teammates, suicide mission solo.',\r\n        createdAt: '2023-05-20T16:45:00Z'\r\n      },\r\n      {\r\n        _id: 'c3',\r\n        user: { _id: 'user5', username: 'SovietTanker' },\r\n        content: 'Great for IS-2 with its strong frontal armor.',\r\n        createdAt: '2023-05-21T08:12:00Z'\r\n      }\r\n    ],\r\n    createdAt: '2023-05-18T11:30:00Z',\r\n    updatedAt: '2023-05-21T08:14:00Z'\r\n  }\r\n];\r\n\r\n/**\r\n * Get all routes\r\n * @returns {Promise} Promise object that resolves to an array of routes\r\n */\r\nexport const getRoutes = () => {\r\n  return new Promise((resolve) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      resolve(sampleRoutes);\r\n    }, 800);\r\n  });\r\n};\r\n\r\n/**\r\n * Get a single route by ID\r\n * @param {string} id - ID of the route\r\n * @returns {Promise} Promise object that resolves to a route object\r\n */\r\nexport const getRouteById = (id) => {\r\n  return new Promise((resolve, reject) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const route = sampleRoutes.find(r => r._id === id);\r\n      \r\n      if (route) {\r\n        resolve(route);\r\n      } else {\r\n        reject(new Error('Route not found'));\r\n      }\r\n    }, 600);\r\n  });\r\n};\r\n\r\n/**\r\n * Get routes by map ID\r\n * @param {string} mapId - ID of the map\r\n * @returns {Promise} Promise object that resolves to an array of routes\r\n */\r\nexport const getRoutesByMap = (mapId) => {\r\n  return new Promise((resolve) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const filteredRoutes = sampleRoutes.filter(route => route.mapId === mapId);\r\n      resolve(filteredRoutes);\r\n    }, 800);\r\n  });\r\n};\r\n\r\n/**\r\n * Get routes by user ID\r\n * @param {string} userId - ID of the user\r\n * @returns {Promise} Promise object that resolves to an array of routes\r\n */\r\nexport const getRoutesByUser = (userId) => {\r\n  return new Promise((resolve) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const filteredRoutes = sampleRoutes.filter(route => route.creator._id === userId);\r\n      resolve(filteredRoutes);\r\n    }, 800);\r\n  });\r\n};\r\n\r\n/**\r\n * Get top rated routes\r\n * @returns {Promise} Promise object that resolves to an array of routes\r\n */\r\nexport const getTopRatedRoutes = () => {\r\n  return new Promise((resolve) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const sortedRoutes = [...sampleRoutes].sort((a, b) => {\r\n        const scoreA = a.upvotes - a.downvotes;\r\n        const scoreB = b.upvotes - b.downvotes;\r\n        return scoreB - scoreA;\r\n      });\r\n      resolve(sortedRoutes.slice(0, 5)); // Top 5 routes\r\n    }, 800);\r\n  });\r\n};\r\n\r\n/**\r\n * Get recent routes\r\n * @returns {Promise} Promise object that resolves to an array of routes\r\n */\r\nexport const getRecentRoutes = () => {\r\n  return new Promise((resolve) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const sortedRoutes = [...sampleRoutes].sort((a, b) => {\r\n        return new Date(b.createdAt) - new Date(a.createdAt);\r\n      });\r\n      resolve(sortedRoutes.slice(0, 5)); // Most recent 5 routes\r\n    }, 800);\r\n  });\r\n};\r\n\r\n/**\r\n * Search routes\r\n * @param {string} searchTerm - Term to search for\r\n * @returns {Promise} Promise object that resolves to an array of routes\r\n */\r\nexport const searchRoutes = (searchTerm) => {\r\n  return new Promise((resolve) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const filteredRoutes = sampleRoutes.filter(route => \r\n        route.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        route.description.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n      resolve(filteredRoutes);\r\n    }, 800);\r\n  });\r\n};\r\n\r\n/**\r\n * Create a new route\r\n * @param {Object} routeData - Data for the new route\r\n * @returns {Promise} Promise object that resolves to the created route\r\n */\r\nexport const createRoute = (routeData) => {\r\n  return new Promise((resolve) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      // Generate a simple random ID\r\n      const newId = Math.floor(Math.random() * 10000).toString();\r\n      \r\n      // Create the new route with timestamp\r\n      const newRoute = {\r\n        _id: newId,\r\n        ...routeData,\r\n        upvotes: 0,\r\n        downvotes: 0,\r\n        comments: [],\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n      \r\n      // In a real app, this would be saved to a database\r\n      // Here we just return it\r\n      resolve(newRoute);\r\n    }, 1200);\r\n  });\r\n};\r\n\r\n/**\r\n * Update an existing route\r\n * @param {string} id - ID of the route to update\r\n * @param {Object} routeData - New data for the route\r\n * @returns {Promise} Promise object that resolves to the updated route\r\n */\r\nexport const updateRoute = (id, routeData) => {\r\n  return new Promise((resolve, reject) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const routeIndex = sampleRoutes.findIndex(r => r._id === id);\r\n      \r\n      if (routeIndex !== -1) {\r\n        // In a real app, this would update the database\r\n        const updatedRoute = {\r\n          ...sampleRoutes[routeIndex],\r\n          ...routeData,\r\n          updatedAt: new Date().toISOString()\r\n        };\r\n        \r\n        resolve(updatedRoute);\r\n      } else {\r\n        reject(new Error('Route not found'));\r\n      }\r\n    }, 1000);\r\n  });\r\n};\r\n\r\n/**\r\n * Delete a route\r\n * @param {string} id - ID of the route to delete\r\n * @returns {Promise} Promise object that resolves when the route is deleted\r\n */\r\nexport const deleteRoute = (id) => {\r\n  return new Promise((resolve, reject) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const routeIndex = sampleRoutes.findIndex(r => r._id === id);\r\n      \r\n      if (routeIndex !== -1) {\r\n        // In a real app, this would delete from the database\r\n        resolve({ success: true, message: 'Route deleted successfully' });\r\n      } else {\r\n        reject(new Error('Route not found'));\r\n      }\r\n    }, 800);\r\n  });\r\n};\r\n\r\n/**\r\n * Vote on a route\r\n * @param {string} id - ID of the route to vote on\r\n * @param {string} voteType - Type of vote ('up' or 'down')\r\n * @returns {Promise} Promise object that resolves to the updated route\r\n */\r\nexport const voteOnRoute = (id, voteType) => {\r\n  return new Promise((resolve, reject) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const routeIndex = sampleRoutes.findIndex(r => r._id === id);\r\n      \r\n      if (routeIndex !== -1) {\r\n        // In a real app, this would update the database\r\n        const updatedRoute = { ...sampleRoutes[routeIndex] };\r\n        \r\n        if (voteType === 'up') {\r\n          updatedRoute.upvotes += 1;\r\n        } else if (voteType === 'down') {\r\n          updatedRoute.downvotes += 1;\r\n        }\r\n        \r\n        resolve(updatedRoute);\r\n      } else {\r\n        reject(new Error('Route not found'));\r\n      }\r\n    }, 500);\r\n  });\r\n};\r\n\r\n/**\r\n * Add a comment to a route\r\n * @param {string} routeId - ID of the route\r\n * @param {Object} commentData - Data for the new comment\r\n * @returns {Promise} Promise object that resolves to the updated route\r\n */\r\nexport const addComment = (routeId, commentData) => {\r\n  return new Promise((resolve, reject) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const routeIndex = sampleRoutes.findIndex(r => r._id === routeId);\r\n      \r\n      if (routeIndex !== -1) {\r\n        // Generate a simple random ID\r\n        const newCommentId = `c${Math.floor(Math.random() * 10000)}`;\r\n        \r\n        // Create the new comment\r\n        const newComment = {\r\n          _id: newCommentId,\r\n          ...commentData,\r\n          createdAt: new Date().toISOString()\r\n        };\r\n        \r\n        // Add comment to route\r\n        const updatedRoute = {\r\n          ...sampleRoutes[routeIndex],\r\n          comments: [...sampleRoutes[routeIndex].comments, newComment],\r\n          updatedAt: new Date().toISOString()\r\n        };\r\n        \r\n        resolve(updatedRoute);\r\n      } else {\r\n        reject(new Error('Route not found'));\r\n      }\r\n    }, 800);\r\n  });\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}