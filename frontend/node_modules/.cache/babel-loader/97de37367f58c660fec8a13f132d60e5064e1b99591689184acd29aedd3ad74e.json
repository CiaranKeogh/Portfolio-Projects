{"ast":null,"code":"import api from './api';\n\n// Sample position data\nconst samplePositions = [{\n  _id: '1',\n  title: 'Eastern Hill Sniper Spot',\n  description: 'Excellent elevated position with clear lines of sight across the eastern approach. Perfect for tank destroyers.',\n  mapId: '3',\n  map: {\n    _id: '3',\n    name: 'Karelia'\n  },\n  creator: {\n    _id: 'user1',\n    username: 'TankCommander'\n  },\n  gameMode: 'Ground Realistic',\n  type: 'Sniper Spot',\n  vehicleType: 'Tank Destroyer',\n  effectiveness: 4.7,\n  coordinates: {\n    x: 185,\n    y: 75\n  },\n  upvotes: 35,\n  downvotes: 3,\n  comments: [{\n    _id: 'c1',\n    user: {\n      _id: 'user4',\n      username: 'TigerAce'\n    },\n    content: 'Great spot for German TDs with their excellent optics.',\n    createdAt: '2023-06-18T09:45:00Z'\n  }],\n  createdAt: '2023-06-12T14:30:00Z',\n  updatedAt: '2023-06-18T09:47:00Z'\n}, {\n  _id: '2',\n  title: 'Central Ridge Cover',\n  description: 'Good hull-down position that provides cover while allowing you to engage enemies crossing the central area.',\n  mapId: '1',\n  map: {\n    _id: '1',\n    name: 'Advance to the Rhine'\n  },\n  creator: {\n    _id: 'user5',\n    username: 'SniperElite'\n  },\n  gameMode: 'Ground Realistic',\n  type: 'Hull-down Position',\n  vehicleType: 'Medium Tank',\n  effectiveness: 4.2,\n  coordinates: {\n    x: 150,\n    y: 130\n  },\n  upvotes: 54,\n  downvotes: 7,\n  comments: [{\n    _id: 'c2',\n    user: {\n      _id: 'user2',\n      username: 'StratMaster'\n    },\n    content: 'Works really well with American tanks that have good gun depression.',\n    createdAt: '2023-05-25T18:15:00Z'\n  }],\n  createdAt: '2023-05-22T11:20:00Z',\n  updatedAt: '2023-05-25T18:17:00Z'\n}, {\n  _id: '3',\n  title: 'Western Ambush Corner',\n  description: 'Hidden spot behind debris that allows for surprise side shots on enemies moving along the western route.',\n  mapId: '5',\n  map: {\n    _id: '5',\n    name: 'Sinai'\n  },\n  creator: {\n    _id: 'user3',\n    username: 'StrategyMaster'\n  },\n  gameMode: 'Ground Realistic',\n  type: 'Ambush Spot',\n  vehicleType: 'Light Tank',\n  effectiveness: 4.4,\n  coordinates: {\n    x: 75,\n    y: 145\n  },\n  upvotes: 42,\n  downvotes: 4,\n  comments: [],\n  createdAt: '2023-07-10T08:45:00Z',\n  updatedAt: '2023-07-10T08:45:00Z'\n}];\n\n/**\r\n * Get all positions\r\n * @returns {Promise} Promise object that resolves to an array of positions\r\n */\nexport const getPositions = () => {\n  return new Promise(resolve => {\n    // Simulate API delay\n    setTimeout(() => {\n      resolve(samplePositions);\n    }, 800);\n  });\n};\n\n/**\r\n * Get a single position by ID\r\n * @param {string} id - ID of the position\r\n * @returns {Promise} Promise object that resolves to a position object\r\n */\nexport const getPositionById = id => {\n  return new Promise((resolve, reject) => {\n    // Simulate API delay\n    setTimeout(() => {\n      const position = samplePositions.find(p => p._id === id);\n      if (position) {\n        resolve(position);\n      } else {\n        reject(new Error('Position not found'));\n      }\n    }, 600);\n  });\n};\n\n/**\r\n * Get positions by map ID\r\n * @param {string} mapId - ID of the map\r\n * @returns {Promise} Promise object that resolves to an array of positions\r\n */\nexport const getPositionsByMap = mapId => {\n  return new Promise(resolve => {\n    // Simulate API delay\n    setTimeout(() => {\n      const filteredPositions = samplePositions.filter(position => position.mapId === mapId);\n      resolve(filteredPositions);\n    }, 800);\n  });\n};\n\n/**\r\n * Get positions by user ID\r\n * @param {string} userId - ID of the user\r\n * @returns {Promise} Promise object that resolves to an array of positions\r\n */\nexport const getPositionsByUser = userId => {\n  return new Promise(resolve => {\n    // Simulate API delay\n    setTimeout(() => {\n      const filteredPositions = samplePositions.filter(position => position.creator._id === userId);\n      resolve(filteredPositions);\n    }, 800);\n  });\n};\n\n/**\r\n * Get top rated positions\r\n * @returns {Promise} Promise object that resolves to an array of positions\r\n */\nexport const getTopRatedPositions = () => {\n  return new Promise(resolve => {\n    // Simulate API delay\n    setTimeout(() => {\n      const sortedPositions = [...samplePositions].sort((a, b) => {\n        const scoreA = a.upvotes - a.downvotes;\n        const scoreB = b.upvotes - b.downvotes;\n        return scoreB - scoreA;\n      });\n      resolve(sortedPositions.slice(0, 5)); // Top 5 positions\n    }, 800);\n  });\n};\n\n/**\r\n * Get recent positions\r\n * @returns {Promise} Promise object that resolves to an array of positions\r\n */\nexport const getRecentPositions = () => {\n  return new Promise(resolve => {\n    // Simulate API delay\n    setTimeout(() => {\n      const sortedPositions = [...samplePositions].sort((a, b) => {\n        return new Date(b.createdAt) - new Date(a.createdAt);\n      });\n      resolve(sortedPositions.slice(0, 5)); // Most recent 5 positions\n    }, 800);\n  });\n};\n\n/**\r\n * Search positions\r\n * @param {string} searchTerm - Term to search for\r\n * @returns {Promise} Promise object that resolves to an array of positions\r\n */\nexport const searchPositions = searchTerm => {\n  return new Promise(resolve => {\n    // Simulate API delay\n    setTimeout(() => {\n      const filteredPositions = samplePositions.filter(position => position.title.toLowerCase().includes(searchTerm.toLowerCase()) || position.description.toLowerCase().includes(searchTerm.toLowerCase()));\n      resolve(filteredPositions);\n    }, 800);\n  });\n};\n\n/**\r\n * Create a new position\r\n * @param {Object} positionData - Data for the new position\r\n * @returns {Promise} Promise object that resolves to the created position\r\n */\nexport const createPosition = positionData => {\n  return new Promise(resolve => {\n    // Simulate API delay\n    setTimeout(() => {\n      // Generate a simple random ID\n      const newId = Math.floor(Math.random() * 10000).toString();\n\n      // Create the new position with timestamp\n      const newPosition = {\n        _id: newId,\n        ...positionData,\n        upvotes: 0,\n        downvotes: 0,\n        comments: [],\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      // In a real app, this would be saved to a database\n      // Here we just return it\n      resolve(newPosition);\n    }, 1200);\n  });\n};\n\n/**\r\n * Update an existing position\r\n * @param {string} id - ID of the position to update\r\n * @param {Object} positionData - New data for the position\r\n * @returns {Promise} Promise object that resolves to the updated position\r\n */\nexport const updatePosition = (id, positionData) => {\n  return new Promise((resolve, reject) => {\n    // Simulate API delay\n    setTimeout(() => {\n      const positionIndex = samplePositions.findIndex(p => p._id === id);\n      if (positionIndex !== -1) {\n        // In a real app, this would update the database\n        const updatedPosition = {\n          ...samplePositions[positionIndex],\n          ...positionData,\n          updatedAt: new Date().toISOString()\n        };\n        resolve(updatedPosition);\n      } else {\n        reject(new Error('Position not found'));\n      }\n    }, 1000);\n  });\n};\n\n/**\r\n * Delete a position\r\n * @param {string} id - ID of the position to delete\r\n * @returns {Promise} Promise object that resolves when the position is deleted\r\n */\nexport const deletePosition = id => {\n  return new Promise((resolve, reject) => {\n    // Simulate API delay\n    setTimeout(() => {\n      const positionIndex = samplePositions.findIndex(p => p._id === id);\n      if (positionIndex !== -1) {\n        // In a real app, this would delete from the database\n        resolve({\n          success: true,\n          message: 'Position deleted successfully'\n        });\n      } else {\n        reject(new Error('Position not found'));\n      }\n    }, 800);\n  });\n};\n\n/**\r\n * Vote on a position\r\n * @param {string} id - ID of the position to vote on\r\n * @param {string} voteType - Type of vote ('up' or 'down')\r\n * @returns {Promise} Promise object that resolves to the updated position\r\n */\nexport const voteOnPosition = (id, voteType) => {\n  return new Promise((resolve, reject) => {\n    // Simulate API delay\n    setTimeout(() => {\n      const positionIndex = samplePositions.findIndex(p => p._id === id);\n      if (positionIndex !== -1) {\n        // In a real app, this would update the database\n        const updatedPosition = {\n          ...samplePositions[positionIndex]\n        };\n        if (voteType === 'up') {\n          updatedPosition.upvotes += 1;\n        } else if (voteType === 'down') {\n          updatedPosition.downvotes += 1;\n        }\n        resolve(updatedPosition);\n      } else {\n        reject(new Error('Position not found'));\n      }\n    }, 500);\n  });\n};\n\n/**\r\n * Add a comment to a position\r\n * @param {string} positionId - ID of the position\r\n * @param {Object} commentData - Data for the new comment\r\n * @returns {Promise} Promise object that resolves to the updated position\r\n */\nexport const addComment = (positionId, commentData) => {\n  return new Promise((resolve, reject) => {\n    // Simulate API delay\n    setTimeout(() => {\n      const positionIndex = samplePositions.findIndex(p => p._id === positionId);\n      if (positionIndex !== -1) {\n        // Generate a simple random ID\n        const newCommentId = `c${Math.floor(Math.random() * 10000)}`;\n\n        // Create the new comment\n        const newComment = {\n          _id: newCommentId,\n          ...commentData,\n          createdAt: new Date().toISOString()\n        };\n\n        // Add comment to position\n        const updatedPosition = {\n          ...samplePositions[positionIndex],\n          comments: [...samplePositions[positionIndex].comments, newComment],\n          updatedAt: new Date().toISOString()\n        };\n        resolve(updatedPosition);\n      } else {\n        reject(new Error('Position not found'));\n      }\n    }, 800);\n  });\n};","map":{"version":3,"names":["api","samplePositions","_id","title","description","mapId","map","name","creator","username","gameMode","type","vehicleType","effectiveness","coordinates","x","y","upvotes","downvotes","comments","user","content","createdAt","updatedAt","getPositions","Promise","resolve","setTimeout","getPositionById","id","reject","position","find","p","Error","getPositionsByMap","filteredPositions","filter","getPositionsByUser","userId","getTopRatedPositions","sortedPositions","sort","a","b","scoreA","scoreB","slice","getRecentPositions","Date","searchPositions","searchTerm","toLowerCase","includes","createPosition","positionData","newId","Math","floor","random","toString","newPosition","toISOString","updatePosition","positionIndex","findIndex","updatedPosition","deletePosition","success","message","voteOnPosition","voteType","addComment","positionId","commentData","newCommentId","newComment"],"sources":["C:/Users/Ciaran/Documents/War Thunder Tactics/frontend/src/services/positionService.js"],"sourcesContent":["import api from './api';\r\n\r\n// Sample position data\r\nconst samplePositions = [\r\n  {\r\n    _id: '1',\r\n    title: 'Eastern Hill Sniper Spot',\r\n    description: 'Excellent elevated position with clear lines of sight across the eastern approach. Perfect for tank destroyers.',\r\n    mapId: '3',\r\n    map: { \r\n      _id: '3', \r\n      name: 'Karelia' \r\n    },\r\n    creator: {\r\n      _id: 'user1',\r\n      username: 'TankCommander'\r\n    },\r\n    gameMode: 'Ground Realistic',\r\n    type: 'Sniper Spot',\r\n    vehicleType: 'Tank Destroyer',\r\n    effectiveness: 4.7,\r\n    coordinates: { x: 185, y: 75 },\r\n    upvotes: 35,\r\n    downvotes: 3,\r\n    comments: [\r\n      {\r\n        _id: 'c1',\r\n        user: { _id: 'user4', username: 'TigerAce' },\r\n        content: 'Great spot for German TDs with their excellent optics.',\r\n        createdAt: '2023-06-18T09:45:00Z'\r\n      }\r\n    ],\r\n    createdAt: '2023-06-12T14:30:00Z',\r\n    updatedAt: '2023-06-18T09:47:00Z'\r\n  },\r\n  {\r\n    _id: '2',\r\n    title: 'Central Ridge Cover',\r\n    description: 'Good hull-down position that provides cover while allowing you to engage enemies crossing the central area.',\r\n    mapId: '1',\r\n    map: { \r\n      _id: '1', \r\n      name: 'Advance to the Rhine' \r\n    },\r\n    creator: {\r\n      _id: 'user5',\r\n      username: 'SniperElite'\r\n    },\r\n    gameMode: 'Ground Realistic',\r\n    type: 'Hull-down Position',\r\n    vehicleType: 'Medium Tank',\r\n    effectiveness: 4.2,\r\n    coordinates: { x: 150, y: 130 },\r\n    upvotes: 54,\r\n    downvotes: 7,\r\n    comments: [\r\n      {\r\n        _id: 'c2',\r\n        user: { _id: 'user2', username: 'StratMaster' },\r\n        content: 'Works really well with American tanks that have good gun depression.',\r\n        createdAt: '2023-05-25T18:15:00Z'\r\n      }\r\n    ],\r\n    createdAt: '2023-05-22T11:20:00Z',\r\n    updatedAt: '2023-05-25T18:17:00Z'\r\n  },\r\n  {\r\n    _id: '3',\r\n    title: 'Western Ambush Corner',\r\n    description: 'Hidden spot behind debris that allows for surprise side shots on enemies moving along the western route.',\r\n    mapId: '5',\r\n    map: { \r\n      _id: '5', \r\n      name: 'Sinai' \r\n    },\r\n    creator: {\r\n      _id: 'user3',\r\n      username: 'StrategyMaster'\r\n    },\r\n    gameMode: 'Ground Realistic',\r\n    type: 'Ambush Spot',\r\n    vehicleType: 'Light Tank',\r\n    effectiveness: 4.4,\r\n    coordinates: { x: 75, y: 145 },\r\n    upvotes: 42,\r\n    downvotes: 4,\r\n    comments: [],\r\n    createdAt: '2023-07-10T08:45:00Z',\r\n    updatedAt: '2023-07-10T08:45:00Z'\r\n  }\r\n];\r\n\r\n/**\r\n * Get all positions\r\n * @returns {Promise} Promise object that resolves to an array of positions\r\n */\r\nexport const getPositions = () => {\r\n  return new Promise((resolve) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      resolve(samplePositions);\r\n    }, 800);\r\n  });\r\n};\r\n\r\n/**\r\n * Get a single position by ID\r\n * @param {string} id - ID of the position\r\n * @returns {Promise} Promise object that resolves to a position object\r\n */\r\nexport const getPositionById = (id) => {\r\n  return new Promise((resolve, reject) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const position = samplePositions.find(p => p._id === id);\r\n      \r\n      if (position) {\r\n        resolve(position);\r\n      } else {\r\n        reject(new Error('Position not found'));\r\n      }\r\n    }, 600);\r\n  });\r\n};\r\n\r\n/**\r\n * Get positions by map ID\r\n * @param {string} mapId - ID of the map\r\n * @returns {Promise} Promise object that resolves to an array of positions\r\n */\r\nexport const getPositionsByMap = (mapId) => {\r\n  return new Promise((resolve) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const filteredPositions = samplePositions.filter(position => position.mapId === mapId);\r\n      resolve(filteredPositions);\r\n    }, 800);\r\n  });\r\n};\r\n\r\n/**\r\n * Get positions by user ID\r\n * @param {string} userId - ID of the user\r\n * @returns {Promise} Promise object that resolves to an array of positions\r\n */\r\nexport const getPositionsByUser = (userId) => {\r\n  return new Promise((resolve) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const filteredPositions = samplePositions.filter(position => position.creator._id === userId);\r\n      resolve(filteredPositions);\r\n    }, 800);\r\n  });\r\n};\r\n\r\n/**\r\n * Get top rated positions\r\n * @returns {Promise} Promise object that resolves to an array of positions\r\n */\r\nexport const getTopRatedPositions = () => {\r\n  return new Promise((resolve) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const sortedPositions = [...samplePositions].sort((a, b) => {\r\n        const scoreA = a.upvotes - a.downvotes;\r\n        const scoreB = b.upvotes - b.downvotes;\r\n        return scoreB - scoreA;\r\n      });\r\n      resolve(sortedPositions.slice(0, 5)); // Top 5 positions\r\n    }, 800);\r\n  });\r\n};\r\n\r\n/**\r\n * Get recent positions\r\n * @returns {Promise} Promise object that resolves to an array of positions\r\n */\r\nexport const getRecentPositions = () => {\r\n  return new Promise((resolve) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const sortedPositions = [...samplePositions].sort((a, b) => {\r\n        return new Date(b.createdAt) - new Date(a.createdAt);\r\n      });\r\n      resolve(sortedPositions.slice(0, 5)); // Most recent 5 positions\r\n    }, 800);\r\n  });\r\n};\r\n\r\n/**\r\n * Search positions\r\n * @param {string} searchTerm - Term to search for\r\n * @returns {Promise} Promise object that resolves to an array of positions\r\n */\r\nexport const searchPositions = (searchTerm) => {\r\n  return new Promise((resolve) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const filteredPositions = samplePositions.filter(position => \r\n        position.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        position.description.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n      resolve(filteredPositions);\r\n    }, 800);\r\n  });\r\n};\r\n\r\n/**\r\n * Create a new position\r\n * @param {Object} positionData - Data for the new position\r\n * @returns {Promise} Promise object that resolves to the created position\r\n */\r\nexport const createPosition = (positionData) => {\r\n  return new Promise((resolve) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      // Generate a simple random ID\r\n      const newId = Math.floor(Math.random() * 10000).toString();\r\n      \r\n      // Create the new position with timestamp\r\n      const newPosition = {\r\n        _id: newId,\r\n        ...positionData,\r\n        upvotes: 0,\r\n        downvotes: 0,\r\n        comments: [],\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n      \r\n      // In a real app, this would be saved to a database\r\n      // Here we just return it\r\n      resolve(newPosition);\r\n    }, 1200);\r\n  });\r\n};\r\n\r\n/**\r\n * Update an existing position\r\n * @param {string} id - ID of the position to update\r\n * @param {Object} positionData - New data for the position\r\n * @returns {Promise} Promise object that resolves to the updated position\r\n */\r\nexport const updatePosition = (id, positionData) => {\r\n  return new Promise((resolve, reject) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const positionIndex = samplePositions.findIndex(p => p._id === id);\r\n      \r\n      if (positionIndex !== -1) {\r\n        // In a real app, this would update the database\r\n        const updatedPosition = {\r\n          ...samplePositions[positionIndex],\r\n          ...positionData,\r\n          updatedAt: new Date().toISOString()\r\n        };\r\n        \r\n        resolve(updatedPosition);\r\n      } else {\r\n        reject(new Error('Position not found'));\r\n      }\r\n    }, 1000);\r\n  });\r\n};\r\n\r\n/**\r\n * Delete a position\r\n * @param {string} id - ID of the position to delete\r\n * @returns {Promise} Promise object that resolves when the position is deleted\r\n */\r\nexport const deletePosition = (id) => {\r\n  return new Promise((resolve, reject) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const positionIndex = samplePositions.findIndex(p => p._id === id);\r\n      \r\n      if (positionIndex !== -1) {\r\n        // In a real app, this would delete from the database\r\n        resolve({ success: true, message: 'Position deleted successfully' });\r\n      } else {\r\n        reject(new Error('Position not found'));\r\n      }\r\n    }, 800);\r\n  });\r\n};\r\n\r\n/**\r\n * Vote on a position\r\n * @param {string} id - ID of the position to vote on\r\n * @param {string} voteType - Type of vote ('up' or 'down')\r\n * @returns {Promise} Promise object that resolves to the updated position\r\n */\r\nexport const voteOnPosition = (id, voteType) => {\r\n  return new Promise((resolve, reject) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const positionIndex = samplePositions.findIndex(p => p._id === id);\r\n      \r\n      if (positionIndex !== -1) {\r\n        // In a real app, this would update the database\r\n        const updatedPosition = { ...samplePositions[positionIndex] };\r\n        \r\n        if (voteType === 'up') {\r\n          updatedPosition.upvotes += 1;\r\n        } else if (voteType === 'down') {\r\n          updatedPosition.downvotes += 1;\r\n        }\r\n        \r\n        resolve(updatedPosition);\r\n      } else {\r\n        reject(new Error('Position not found'));\r\n      }\r\n    }, 500);\r\n  });\r\n};\r\n\r\n/**\r\n * Add a comment to a position\r\n * @param {string} positionId - ID of the position\r\n * @param {Object} commentData - Data for the new comment\r\n * @returns {Promise} Promise object that resolves to the updated position\r\n */\r\nexport const addComment = (positionId, commentData) => {\r\n  return new Promise((resolve, reject) => {\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      const positionIndex = samplePositions.findIndex(p => p._id === positionId);\r\n      \r\n      if (positionIndex !== -1) {\r\n        // Generate a simple random ID\r\n        const newCommentId = `c${Math.floor(Math.random() * 10000)}`;\r\n        \r\n        // Create the new comment\r\n        const newComment = {\r\n          _id: newCommentId,\r\n          ...commentData,\r\n          createdAt: new Date().toISOString()\r\n        };\r\n        \r\n        // Add comment to position\r\n        const updatedPosition = {\r\n          ...samplePositions[positionIndex],\r\n          comments: [...samplePositions[positionIndex].comments, newComment],\r\n          updatedAt: new Date().toISOString()\r\n        };\r\n        \r\n        resolve(updatedPosition);\r\n      } else {\r\n        reject(new Error('Position not found'));\r\n      }\r\n    }, 800);\r\n  });\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}