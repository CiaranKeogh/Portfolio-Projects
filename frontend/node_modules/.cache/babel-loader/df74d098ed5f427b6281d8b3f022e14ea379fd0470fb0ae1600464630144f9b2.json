{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ciaran\\\\Documents\\\\War Thunder Tactics\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check if user is already logged in (from localStorage)\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      try {\n        const storedUser = localStorage.getItem('user');\n        const storedToken = localStorage.getItem('token');\n        if (storedUser && storedToken) {\n          // In a real app, you'd validate the token with the backend here\n          setUser(JSON.parse(storedUser));\n          setIsAuthenticated(true);\n        }\n      } catch (err) {\n        console.error('Error checking authentication status:', err);\n        // Clear potentially corrupted data\n        localStorage.removeItem('user');\n        localStorage.removeItem('token');\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkLoggedIn();\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // In a real app, this would be an API call to your backend\n      // For demo purposes, we'll just simulate a successful login with mock data\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock user data - in a real app, this would come from your backend\n      if (email === 'user@example.com' && password === 'password') {\n        const userData = {\n          id: '1',\n          username: 'TankCommander',\n          email: 'user@example.com',\n          roles: ['user']\n        };\n        const token = 'mock-jwt-token';\n\n        // Store auth data in localStorage\n        localStorage.setItem('user', JSON.stringify(userData));\n        localStorage.setItem('token', token);\n        setUser(userData);\n        setIsAuthenticated(true);\n        setError(null);\n        return {\n          success: true\n        };\n      } else {\n        throw new Error('Invalid email or password');\n      }\n    } catch (err) {\n      setError(err.message || 'An error occurred during login');\n      return {\n        success: false,\n        error: err.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register function\n  const register = async (username, email, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // In a real app, this would be an API call to your backend\n      // For demo purposes, we'll just simulate a successful registration\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // Mock validation\n      if (email === 'user@example.com') {\n        throw new Error('Email already in use');\n      }\n\n      // Return success (in a real app, you might automatically log the user in)\n      return {\n        success: true\n      };\n    } catch (err) {\n      setError(err.message || 'An error occurred during registration');\n      return {\n        success: false,\n        error: err.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    // Clear user data from state\n    setUser(null);\n    setIsAuthenticated(false);\n\n    // Clear localStorage\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n  };\n\n  // Get auth header (for making authenticated API calls)\n  const getAuthHeader = () => {\n    const token = localStorage.getItem('token');\n    return token ? {\n      Authorization: `Bearer ${token}`\n    } : {};\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      loading,\n      error,\n      login,\n      register,\n      logout,\n      getAuthHeader\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"AaZCefjEQIISzggwPe9U62ieYJk=\");\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","error","setError","checkLoggedIn","storedUser","localStorage","getItem","storedToken","JSON","parse","err","console","removeItem","login","email","password","Promise","resolve","setTimeout","userData","id","username","roles","token","setItem","stringify","success","Error","message","register","logout","getAuthHeader","Authorization","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Ciaran/Documents/War Thunder Tactics/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Check if user is already logged in (from localStorage)\r\n  useEffect(() => {\r\n    const checkLoggedIn = async () => {\r\n      try {\r\n        const storedUser = localStorage.getItem('user');\r\n        const storedToken = localStorage.getItem('token');\r\n        \r\n        if (storedUser && storedToken) {\r\n          // In a real app, you'd validate the token with the backend here\r\n          setUser(JSON.parse(storedUser));\r\n          setIsAuthenticated(true);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error checking authentication status:', err);\r\n        // Clear potentially corrupted data\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('token');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    checkLoggedIn();\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (email, password) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // In a real app, this would be an API call to your backend\r\n      // For demo purposes, we'll just simulate a successful login with mock data\r\n      \r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // Mock user data - in a real app, this would come from your backend\r\n      if (email === 'user@example.com' && password === 'password') {\r\n        const userData = {\r\n          id: '1',\r\n          username: 'TankCommander',\r\n          email: 'user@example.com',\r\n          roles: ['user']\r\n        };\r\n        \r\n        const token = 'mock-jwt-token';\r\n        \r\n        // Store auth data in localStorage\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        localStorage.setItem('token', token);\r\n        \r\n        setUser(userData);\r\n        setIsAuthenticated(true);\r\n        setError(null);\r\n        \r\n        return { success: true };\r\n      } else {\r\n        throw new Error('Invalid email or password');\r\n      }\r\n    } catch (err) {\r\n      setError(err.message || 'An error occurred during login');\r\n      return { success: false, error: err.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Register function\r\n  const register = async (username, email, password) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // In a real app, this would be an API call to your backend\r\n      // For demo purposes, we'll just simulate a successful registration\r\n      \r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      \r\n      // Mock validation\r\n      if (email === 'user@example.com') {\r\n        throw new Error('Email already in use');\r\n      }\r\n      \r\n      // Return success (in a real app, you might automatically log the user in)\r\n      return { success: true };\r\n    } catch (err) {\r\n      setError(err.message || 'An error occurred during registration');\r\n      return { success: false, error: err.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    // Clear user data from state\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    \r\n    // Clear localStorage\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n  };\r\n\r\n  // Get auth header (for making authenticated API calls)\r\n  const getAuthHeader = () => {\r\n    const token = localStorage.getItem('token');\r\n    return token ? { Authorization: `Bearer ${token}` } : {};\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        isAuthenticated,\r\n        loading,\r\n        error,\r\n        login,\r\n        register,\r\n        logout,\r\n        getAuthHeader\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthProvider; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}